import java.util.Arrays;
import java.util.Scanner;

public class Main {
    private static char[][] board = new char[3][3];
    private static char currentPlayer = 'X';
    private static Scanner scanner = new Scanner(System.in);
 
    public static void main(String[] args) {
        initializeBoard();
        boolean playAgain = true;

        while (playAgain) {
            boolean gameOver = false;

            while (!gameOver) {
                displayBoard();
                makeMove();
                gameOver = checkGameStatus();
            }

            displayBoard();
            playAgain = playAgainPrompt();
            initializeBoard();
        }

        System.out.println("Thanks for playing!");
    }

    private static void initializeBoard() {
        for (char[] row : board) {
            Arrays.fill(row, '-');
        }
    }

    private static void displayBoard() {
        System.out.println("---------");
        for (char[] row : board) {
            System.out.print("| ");
            for (char cell : row) {
                System.out.print(cell + " ");
            }
            System.out.println("|");
        }
        System.out.println("---------");
    }

    private static void makeMove() {
        int row, col;
        do {
            System.out.printf("Player %s, enter row (0-2) and column (0-2): ", currentPlayer);
            row = scanner.nextInt();
            col = scanner.nextInt();
        } while (!isValidMove(row, col));

        board[row][col] = currentPlayer;
        currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
    }

    private static boolean isValidMove(int row, int col) {
        if (row < 0 || row > 2 || col < 0 || col > 2) {
            System.out.println("Invalid move, try again.");
            return false;
        }
        if (board[row][col] != '-') {
            System.out.println("Cell already occupied, try again.");
            return false;
        }
        return true;
    }

    private static boolean checkGameStatus() {
        // Check rows
        for (char[] row : board) {
            if (row[0] != '-' && row[0] == row[1] && row[1] == row[2]) {
                declareWinner(row[0]);
                return true;
            }
        }

        // Check columns
        for (int col = 0; col < 3; col++) {
            if (board[0][col] != '-' && board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
                declareWinner(board[0][col]);
                return true;
            }
        }

        // Check diagonals
        if (board[0][0] != '-' && board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
            declareWinner(board[0][0]);
            return true;
        }
        if (board[0][2] != '-' && board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
            declareWinner(board[0][2]);
            return true;
        }

        // Check for a tie
        for (char[] row : board) {
            for (char cell : row) {
                if (cell == '-') {
                    return false;
                }
            }
        }
        declareTie();
        return true;
    }

    private static void declareWinner(char winner) {
        System.out.printf("Player %s wins!\n", winner);
    }

    private static void declareTie() {
        System.out.println("Tie game!");
    }

    private static boolean playAgainPrompt() {
        System.out.print("Play again? (y/n): ");
        String input = scanner.next();
        return input.equalsIgnoreCase("y");
    }
}
